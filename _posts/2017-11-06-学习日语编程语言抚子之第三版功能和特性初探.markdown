---
layout: post
comments: true
title:  日语编程语言"抚子" - 第三版特色初探
description: 对最新版的"抚子"语言进行各方面学习, 此文从功能和特性开始. Study the unique features and designs from the Japanese programming language Nadesiko.
date:   2017-11-06 00:00:00 -0700
categories: 语言设计
---

它山之石可以攻玉. 学习其他的母语编程语言, 相信对中文编程语言的设计和实践有借鉴意义. 本人刚刚开始接触"抚子"语言, 从官方文档开始探索. 以下试图突出一些发现的特色和亮点, 更完整的语法列表请见[讨论组主题帖](https://github.com/program-in-chinese/overview/issues/46).

一些背景资料: [官方网站](https://nadesi.com/) 
- 第三版(最新)[源码库](https://github.com/kujirahand/nadesiko3), 用JavaScript实现, 代码提交从2017/2至今
- 第二版[源码库](https://github.com/kujirahand/nadesiko2), 用C#实现. 代码提交从2010/6到2016/2.
- 第一版[源码库](https://github.com/kujirahand/nadesiko), 用Pascal实现, 最近仍然在更新. 最早代码提交是2008年, 但应该在更早几年前就已经成型.

下面的示例代码源自第三版[语法文档](https://nadesi.com/doc3/index.php?文法). 限于日语水平, 对它的示例源码也许有理解出入. 为方便理解, 已把它们转成对应的中文, 词序有不少调整. 如发现大的出入, 非常欢迎到主题帖批评指正.

### 接近日语自然语言的语法

比如它允许多种方式赋值:
```
价格是3000    #  原代码: 値段は3000
价格=2000
置价格为4000   # 値段に4000を代入。
```
很明显它支持是无空格语法, 也同时支持传统(=)赋值和接近自然语言的赋值方式. 这个风格贯穿所有语法.
又如条件语句:
```
A = 4
如果A不是5
   显示为「OK」
如果不是
   显示为「NG」
直到这里。
```
暂时不确定空格缩进是否像Python那样必须, 还是仅为了代码可读性.

#### 特别的'它'
```
加5到30，并乘以2来显示它。
加5到30。 它乘以两倍。 显示它。
```
`它`的使用, 是一个特色. 个人感觉是内置的匿名变量, 并且在函数没有实参时默认使用. **这是很接近自然语言的指代用法**! 例如:
```
它是“  abc   ”   <--- 后面几行都省略了'它'
空白删除。
大写转换
用“*”替换“A”
显示。
```
在函数中可以用`它`, 作为返回的默认值:
```
●（A和B的）加法是
    它是A + B
    返回
直到这里
```
上例中即使没有`返回`"它", 函数返回值仍然是`它`的值

`它`也会随着函数执行而更新, 如下示例, 函数体中没有`它`, 但仍然显示`50`
```
●（A和B的）加法是
    B添加到A
直到这里
30和7的加法. 显示它.
```

#### 精简的循环

'回数'是个保留变量, 可以获得当前循环次数的序号:
```
N=3
(N)次
　　显示「这是第{回数}次」。
直到这里。
```
也可以遍历:
```
重复[1，2，3], 这里开始
    显示对象。
直到这里。
```
上面的`对象`应该是类似`回数`的内置变量, 用以返回当前循环对应的值. (推测上面如果是`显示{回数}`的话, 应该显示`0 1 2`)
上面也可以用`显示它`

对象按照键遍历:
```
OBJ = {“Jan”：1，“Feb”：2，“Mar”：3，“Apr”：4}
重复OBJ
    显示「{对象键} = {对象}月份」
直到这里。
```
这里也可以看到它支持JSON数据结构.

#### 显式声明变量/常量

可带初始化的声明:
```
A是变量=30
B是常量=50
```
也可以简写:
```
变量A=30
常量B=50
```

### 函数

支持递归和匿名函数, 后者还未来得及细究(官方文档在[此](https://nadesi.com/doc3/index.php?無名関数について))

### 允许内嵌JavaScript

这是个非常重要的功能, 虽然没有深入, 但个人理解是类似于Scala调用Java库的功能, 因而"抚子"语言可以用于所有JavaScript可用的领域(包括前后端). 因为此版是在NPM发布的, 猜测JavaScript也可以调用抚子语言的模块. 在缺乏自身的核心标准库时, 个人感觉新语言依托现有成熟语言的核心库以及丰富的第三方库对推广来说至关重要. 

#### JavaScript回调事件参数 <--- 此处不甚理解
`参数`这一内置变量可以以数组形式获取event参数的值。
```
●(A和B的)加法是
  它＝参数[0] + 参数[1]
直到这里
显示3和5的加法。
```

### 对移动设备和输入法的特别优化

一个很有特色的功能是, 为了简便地访问数组/对象. 因为智能手机很难输入`A[n]`(猜想因为[]是在"符号"部分), 因此允许`A@n`. 这是第一次看到为了移动设备而设计的功能.

### 其他

#### 字符串展开
感觉类似于Scala的功能(string interpolation). 复杂的字符串可以用{% raw %}S{{{...}}}{% endraw %}(三对以上的大括号)表示:
{% raw %}
```
得分是35。 评价是「A」。
成绩报告是S{{{★成績表★
·他的分数是{得分}。
·评价是{评价}。}}}
显示成绩报告。
```
{% endraw %}
返回:
```
★成績表★
・他的分数是35。
・评价是A。
```
